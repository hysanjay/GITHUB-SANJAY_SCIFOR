WhatsApp Clone Project

This is a front-end-only WhatsApp clone application built with HTML, CSS, and JavaScript. The project simulates a basic chat interface, allowing users to experience a single-user chat interaction with responsive design and temporary data storage using `localStorage`.


Project Overview

This project is designed to replicate the look and feel of WhatsApp using core front-end technologies. It allows users to send messages, displays them in a chat interface, and includes timestamps. While it does not have backend support, the UI and interactions are created to provide a realistic chat experience.

Features

- User Interface (UI): WhatsApp-style layout with a sidebar for contacts and a main chat window.
- Responsive Design: Optimized for both mobile and desktop views.
- Message Sending: Users can type and send messages that appear in the chat window.
- Timestamp: Adds timestamps for each message.
- Local Storage: Messages are stored temporarily in `localStorage` for the current session.
- CSS Animations: Smooth animations for chat bubbles and transitions.

 Technologies Used

- HTML**: Structuring the web pages.
- CSS: Styling and layout, including responsive design with media queries.
- JavaScript**: Handling user interactions, message display, timestamping, and local storage.

 Installation

1. Clone the repository:

   git clone https://github.com/your-username/whatsapp-clone.git
   
2. Navigate to the project directory:
   
   cd whatsapp-clone
   
3. Open `index.html` in your preferred web browser.**

Usage

1. Open the `index.html` file in a web browser.
2. Type a message in the input box and click "Send."
3. Your message will appear in the chat window with a timestamp.
4. Messages are stored in `localStorage` and will remain for the session.

 File Structure


whatsapp-clone/
├── index.html         # Main HTML file for the application
├── css/
│   └── styles.css     # CSS file for styling the UI
└── js/
    └── script.js      # JavaScript file for chat functionality



Future Enhancements

- **Backend Integration**: Add a server and database for real chat functionality.
- **User Authentication**: Enable multi-user support with login and profiles.
- **Real-time Messaging**: Implement WebSocket or Socket.io for real-time communication.
- **Media Sharing**: Add support for sending images, videos, and documents.

Contributing

Contributions are welcome! To contribute:

1. Fork the repository.
2. Create a new branch.
3. Make your changes.
4. Submit a pull request.

License

This project is licensed under the MIT License. See the [LICENSE] file for details.

